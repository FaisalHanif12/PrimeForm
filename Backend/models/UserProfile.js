const mongoose = require('mongoose');

const userProfileSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
    unique: true
  },
  // Basic Information
  country: {
    type: String,
    required: true
  },
  age: {
    type: Number,
    required: true,
    min: 13,
    max: 120
  },
  gender: {
    type: String,
    enum: [
      // English values
      'male', 'female', 'other',
      // Urdu values
      'ŸÖÿ±ÿØ', 'ÿÆŸàÿßÿ™€åŸÜ', 'ÿØ€å⁄Øÿ±'
    ],
    required: true
  },
  
  // Physical Information
  height: {
    type: String,
    required: true
  },
  currentWeight: {
    type: String,
    required: true
  },
  targetWeight: {
    type: String,
    required: false
  },
  bodyGoal: {
    type: String,
    enum: [
      // English values
      'Lose Fat', 'Gain Muscle', 'Maintain Weight', 'General Training', 'Improve Fitness',
      // Urdu values
      '⁄Üÿ±ÿ®€å ⁄©ŸÖ ⁄©ÿ±€å⁄∫', 'ŸæŸπ⁄æ€í ÿ®ŸÜÿßÿ¶€å⁄∫', 'Ÿàÿ≤ŸÜ ÿ®ÿ±ŸÇÿ±ÿßÿ± ÿ±⁄©⁄æ€å⁄∫', 'ÿπŸÖŸàŸÖ€å ÿ™ÿ±ÿ®€åÿ™', 'ŸÅŸπŸÜÿ≥ ÿ®€Åÿ™ÿ± ⁄©ÿ±€å⁄∫'
    ],
    required: true
  },
  
  // Lifestyle & Health
  medicalConditions: {
    type: String,
    default: ''
  },
  occupationType: {
    type: String,
    enum: [
      // English values
      'Sedentary Desk Job', 'Active Job', 'Shift Worker', 'Student', 'Retired', 'Other',
      // Urdu values
      'ÿ®€åŸπ⁄æ€í €ÅŸàÿ¶€í ⁄à€åÿ≥⁄© ⁄©ÿß ⁄©ÿßŸÖ', 'ŸÖÿ™ÿ≠ÿ±⁄© ⁄©ÿßŸÖ', 'ÿ¥ŸÅŸπ Ÿàÿ±⁄©ÿ±', 'ÿ∑ÿßŸÑÿ® ÿπŸÑŸÖ', 'ÿ±€åŸπÿßÿ¶ÿ±⁄à', 'ÿØ€å⁄Øÿ±'
    ],
    required: false
  },
  availableEquipment: {
    type: String,
    enum: [
      // English values
      'None', 'Basic Dumbbells', 'Resistance Bands', 'Home Gym', 'Full Gym Access',
      // Urdu values
      '⁄©Ÿàÿ¶€å ŸÜ€Å€å⁄∫', 'ÿ®ŸÜ€åÿßÿØ€å ⁄àŸÖÿ®ŸÑÿ≤', 'ŸÖÿ≤ÿßÿ≠ŸÖÿ™€å ÿ®€åŸÜ⁄àÿ≤', '⁄Ø⁄æÿ±€åŸÑŸà ÿ¨ŸÖ', 'ŸÖ⁄©ŸÖŸÑ ÿ¨ŸÖ ÿ™⁄© ÿ±ÿ≥ÿßÿ¶€å'
    ],
    required: false
  },
  
  // Diet Preferences
  dietPreference: {
    type: String,
    enum: [
      // English values
      'Vegetarian', 'Non-Vegetarian', 'Vegan', 'Flexitarian', 'Pescatarian',
      // Urdu values
      'ÿ≥ÿ®ÿ≤€å ÿÆŸàÿ±', 'ÿ≥ÿ®ÿ≤€å ÿÆŸàÿ± ŸÜ€Å€å⁄∫', 'Ÿà€å⁄ØŸÜ', 'ŸÅŸÑ€å⁄©ÿ≥€åŸπ€åÿ±€åŸÜ', 'Ÿæ€åÿ≥⁄©€åŸπ€åÿ±€åŸÜ'
    ],
    required: false
  },
  
  // Metadata
  isProfileComplete: {
    type: Boolean,
    default: false
  },
  badges: {
    type: [String],
    default: []
  },
  lastUpdated: {
    type: Date,
    default: Date.now
  }
}, {
  timestamps: true
});

// Update isProfileComplete and add badges when required fields are filled
userProfileSchema.pre('save', function(next) {
  const requiredFields = ['country', 'age', 'gender', 'height', 'currentWeight', 'bodyGoal'];
  this.isProfileComplete = requiredFields.every(field => this[field]);
  
  // Add profile completion badge if profile is complete and doesn't already have it
  if (this.isProfileComplete && !this.badges.includes('profile_completion')) {
    this.badges.push('profile_completion');
  }
  
  next();
});

// Post-save middleware to send notifications when badge is earned
userProfileSchema.post('save', async function(doc) {
  try {
    // Check if this is a new profile completion badge
    if (doc.isProfileComplete && doc.badges.includes('profile_completion')) {
      // Get the user details for the notification
      const User = require('./User');
      const user = await User.findById(doc.userId);
      
      if (user) {
        // Import and call the notification service
        const NotificationService = require('../services/notificationService');
        
        // Send profile completion badge notification
        await NotificationService.createProfileCompletionBadgeNotification(
          doc.userId,
          user.fullName
        );
        
        console.log('üèÜ Profile completion badge notification sent for user:', user.email);
      }
    }
  } catch (error) {
    console.error('‚ö†Ô∏è Error sending profile completion notification:', error.message);
    // Don't throw error to avoid breaking the save operation
  }
});

module.exports = mongoose.model('UserProfile', userProfileSchema);
